{"id":"flags.html","dependencies":[{"name":"./assets/images/3.jpg","dynamic":true,"resolved":"/Users/meinixue/Documents/GitHub/aladino-test2/assets/images/3.jpg","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/flags.html"},{"name":"./assets/images/4.jpg","dynamic":true,"resolved":"/Users/meinixue/Documents/GitHub/aladino-test2/assets/images/4.jpg","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/flags.html"},{"name":"./assets/images/1.jpg","dynamic":true,"resolved":"/Users/meinixue/Documents/GitHub/aladino-test2/assets/images/1.jpg","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/flags.html"},{"name":"./assets/images/2.jpg","dynamic":true,"resolved":"/Users/meinixue/Documents/GitHub/aladino-test2/assets/images/2.jpg","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/flags.html"},{"name":"./assets/images/5.jpg","dynamic":true,"resolved":"/Users/meinixue/Documents/GitHub/aladino-test2/assets/images/5.jpg","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/flags.html"},{"name":"_css_loader","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/flags.html","resolved":"/usr/local/lib/node_modules/parcel-bundler/src/builtins/css-loader.js"},{"name":"/Users/meinixue/Documents/GitHub/aladino-test2/package.json","includedInParent":true,"mtime":1615897810000}],"generated":{"html":"<html>\n  <head>\n    <title>Aladino</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>html,\n      body {\n        margin: 0;\n        padding: 0;\n        font-family: Arial;\n      }\n\n      * {\n        box-sizing: border-box;\n      }\n\n      .wrapper {\n        width: 100%;\n        padding: 0 40px;\n        max-width: 900px;\n        margin: 0 auto;\n      }\n\n      img {\n        width: 70%;\n        margin: 0 auto;\n        display: block;\n        margin: 20px auto;\n      }\n\n      p {\n        margin: 40px 0;\n        line-height: 2;\n      }</style>\n  </head>\n  <body>\n    <div class=\"wrapper\">\n      <img src=\"/b4f1638f3d798457542ff4bc20eadd3a.jpg\">\n      <p>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Labore vitae\n        adipisci numquam sequi, ab officiis accusamus tempora quasi minus quod,\n        obcaecati nam, harum laborum enim autem doloremque nulla sed mollitia.\n      </p>\n      <img src=\"/d49179d82fe118fba72ba2734863ecca.jpg\">\n      <p>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Labore vitae\n        adipisci numquam sequi, ab officiis accusamus tempora quasi minus quod,\n        obcaecati nam, harum laborum enim autem doloremque nulla sed mollitia.\n      </p>\n      <img src=\"/3f3e71bc65ea5d507ad87ab02f9c0db9.jpg\">\n      <p>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Labore vitae\n        adipisci numquam sequi, ab officiis accusamus tempora quasi minus quod,\n        obcaecati nam, harum laborum enim autem doloremque nulla sed mollitia.\n      </p>\n      <img src=\"/5ee6e46d858c8cbfcc777470df66db45.jpg\">\n      <p>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Labore vitae\n        adipisci numquam sequi, ab officiis accusamus tempora quasi minus quod,\n        obcaecati nam, harum laborum enim autem doloremque nulla sed mollitia.\n      </p>\n      <img src=\"/cbc7383c0dbda9d06b318e521ed048d9.jpg\">\n    </div>\n\n    <script type=\"module\">\n      import Aladino from \"./src/index.js\";\n\n      const aladino = new Aladino({\n        density: 20,\n      });\n\n      document.body.appendChild(aladino.canvas);\n\n      const imgs = [...document.querySelectorAll(\"img\")];\n      const material = aladino.material({\n        vertex: /* glsl */ `\n          attribute vec2 position;\n          attribute vec2 uv;\n\n          uniform mat4 projection;\n          uniform float time;\n\n          uniform float uSpeed;\n\n          varying vec2 vUv;\n          varying vec3 vPos;\n\n          float parabola( float x, float k )\n          {\n              return pow( 4.0*x*(1.0-x), k );\n          }\n\n          mat4 rotationMatrix(vec3 axis, float angle) {\n            axis = normalize(axis);\n            float s = sin(angle);\n            float c = cos(angle);\n            float oc = 1.0 - c;\n\n            return mat4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s, 0.0,\n            oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s, 0.0,\n            oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c, 0.0,\n            0.0, 0.0, 0.0, 1.0);\n          }\n\n          void main() {\n            vUv = uv;\n\n            float pulse = sin(time * 0.002 + uv.y * 4.0);\n            pulse += sin(time * 0.0023 + uv.x * 3.21);\n\n            vec4 pos = vec4(position, pulse * .3, 1.0);\n\n            pos = rotationMatrix(vec3(1.0, 0.0, 0.0), 0.3) * pos;\n\n            vPos = pos.xyz;\n\n            gl_Position = projection * pos;\n          }\n        `,\n        fragment: /* glsl */ `\n          precision highp float;\n\n          uniform vec2 size;\n          uniform vec2 sizeImage;\n          uniform sampler2D image;\n\n          varying vec2 vUv;\n          varying vec3 vPos;\n\n          vec4 coverTexture(vec2 ruv) {\n            vec2 s = size;\n            vec2 i = sizeImage;\n\n            float rs = s.x / s.y;\n            float ri = i.x / i.y;\n            vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\n            vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\n            vec2 uv = ruv * s / new + offset;\n          \n            return texture2D(image, uv);\n          }\n\n          void main() {\n            gl_FragColor = coverTexture(vUv);\n\n            gl_FragColor.rgb *= smoothstep(-2.0, 2.0, vPos.z);\n\n            //gl_FragColor *= vPos.z;\n          }\n        `,\n        uniforms: {\n          uSpeed: 2.0,\n        },\n      });\n\n      imgs.forEach((el) => {\n        aladino.carpet(el, {\n          material,\n          uniforms: {\n            image: aladino.texture(el.src),\n          },\n        });\n      });\n    </script>\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"efb64da9c7bba54b684d21ed2b3c2e79","cacheData":{"env":{}}}