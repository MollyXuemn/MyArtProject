{"id":"grid.html","dependencies":[{"name":"_css_loader","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/grid.html","resolved":"/usr/local/lib/node_modules/parcel-bundler/src/builtins/css-loader.js"},{"name":"/Users/meinixue/Documents/GitHub/aladino-test2/package.json","includedInParent":true,"mtime":1615897810000}],"generated":{"html":"<html>\n  <head>\n    <title>Aladino</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/flickity@2/dist/flickity.min.css\">\n    <style>html,\n      body {\n        margin: 0;\n        padding: 0;\n        font-size: 0;\n      }\n\n      * {\n        box-sizing: border-box;\n      }\n\n      .wrapper {\n        padding: 30px;\n        columns: 4;\n        column-gap: 30px;\n        column-fill: initial;\n      }\n\n      .brick {\n        display: inline-block;\n        vertical-align: top;\n        height: 0;\n        margin-bottom: 30px;\n        background: black;\n        width: 100%;\n      }\n\n      img {\n        width: 100%;\n        height: auto;\n      }\n\n      canvas {\n        z-index: 1;\n      }</style>\n  </head>\n\n  <body>\n    <div class=\"wrapper\"></div>\n\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/gsap/3.0.5/gsap.min.js\" type=\"text/javascript\"></script>\n    <script type=\"module\">\n      import Aladino from \"./src/index.js\";\n      import lerp from \"./assets/lerp.js\";\n\n      const random = (min, max) => {\n        return Math.floor(Math.random() * (+max - +min)) + +min;\n      };\n\n      const wrapper = document.querySelector(\".wrapper\");\n      for (let i = 0; i < 50; i++) {\n        const div = document.createElement(\"div\");\n        div.classList.add(\"brick\");\n\n        const width = random(500, 900);\n        const height = random(800, 1000);\n        const img = document.createElement(\"img\");\n        img.dataset.src = `https://source.unsplash.com/random/${width}x${height}`;\n        img.width = width;\n        img.height = height;\n\n        div.style.paddingBottom = `${(height / width) * 100}%`;\n\n        div.appendChild(img);\n        wrapper.appendChild(div);\n      }\n\n      const aladino = new Aladino({\n        density: 10,\n      });\n\n      document.body.appendChild(aladino.canvas);\n\n      const material = aladino.material({\n        vertex: /* glsl */ `\n        attribute vec2 position;\n        attribute vec2 uv;\n\n        uniform mat4 projection;\n        uniform float speed;\n        uniform float boarding;\n\n        varying vec2 vUv;\n        varying float vY;\n\n        float parabola( float x, float k ) {\n          return pow( 4.0*x*(1.0-x), k );\n        }\n\n        void main() {\n          vUv = uv;\n\n          vec4 pos = vec4(position, 0.0, 1.0);\n\n          float spee = speed;\n          vec4 pp = projection * vec4(position, 0.0, 1.0);\n          float xx = ((pp / pp.w).x + 1.0) / 2.0;\n          float yy = ((pp / pp.w).y + 1.0) / 2.0;\n\n          vY = clamp(yy, 0.0, 1.0);\n\n          xx = parabola(clamp(xx, 0.0, 1.0), 1.2);\n          yy = parabola(clamp(yy, 0.0, 1.0), 1.2);\n\n          pos.z += (xx * mix(1.0, 2.0, spee)) * boarding;\n          pos.z += (yy * mix(1.0, 2.0, spee)) * boarding;\n\n\n          gl_Position = projection * pos;\n        }\n      `,\n        fragment: /* glsl */ `\n        precision highp float;\n\n        uniform vec2 size;\n\n        uniform vec2 sizeImage;\n        uniform sampler2D image;\n        uniform float show;\n        uniform float scale;\n\n        varying vec2 vUv;\n        varying float vY;\n\n        vec4 coverTexture(sampler2D tex, vec2 imgSize, vec2 ouv) {\n          vec2 s = size;\n          vec2 i = imgSize;\n\n          float rs = s.x / s.y;\n          float ri = i.x / i.y;\n          vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\n          vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\n          vec2 uv = ouv * s / new + offset;\n        \n          return texture2D(tex, uv);\n        }\n\n        void main() {\n          vec2 uv = vUv;\n\n          uv -= 0.5;\n          uv *= 0.4;\n          uv *= mix(0.90, 1.0, scale);\n          uv.y -= (1.0 - vY) * 0.4;\n          uv += 0.5;\n\n          vec4 color = vec4(0.0, 0.0, 0.0, 1.0);\n          color.rgb += mix(color.rgb, coverTexture(image, sizeImage, uv).rgb, show);\n\n          gl_FragColor = color;\n        }\n      `,\n        uniforms: {\n          speed: 0,\n          boarding: 0,\n        },\n      });\n\n      gsap.to(material.uniforms, {\n        boarding: 1,\n        duration: 7,\n        delay: 1,\n        ease: \"elastic.out(1, .1)\",\n      });\n\n      const bricks = [...document.querySelectorAll(\".brick\")];\n\n      bricks.forEach((brick) => {\n        const image = aladino.texture(brick.querySelector(\"img\").dataset.src);\n\n        const carpet = aladino.carpet(brick, {\n          material,\n          uniforms: {\n            image,\n            show: 0,\n            scale: 0,\n          },\n        });\n\n        image.loading.then(() => {\n          gsap.to(carpet.uniforms, {\n            show: 1,\n            duration: 2,\n          });\n\n          gsap.to(carpet.uniforms, {\n            scale: 1,\n            duration: 5,\n          });\n        });\n      });\n\n      let oldPos = aladino.y;\n      let speed = 0;\n\n      const update = () => {\n        requestAnimationFrame(update);\n\n        // aladino.post.uniforms.speed = lerp(aladino.post.uniforms.speed, speed, .04);\n        // material.uniforms.speed = lerp(material.uniforms.speed, speed, .04);\n\n        speed = (aladino.y - oldPos) * 0.1;\n        material.uniforms.speed = lerp(\n          material.uniforms.speed,\n          speed * 0.2,\n          0.03\n        );\n        oldPos = aladino.y;\n      };\n\n      update();\n    </script>\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"cb6f63bb221598731bc58ef67d351095","cacheData":{"env":{}}}