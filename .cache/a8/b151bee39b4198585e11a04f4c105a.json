{"id":"spiral.html","dependencies":[{"name":"./assets/images/4.jpg","dynamic":true,"resolved":"/Users/meinixue/Documents/GitHub/aladino-test2/assets/images/4.jpg","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/spiral.html"},{"name":"./assets/images/3.jpg","dynamic":true,"resolved":"/Users/meinixue/Documents/GitHub/aladino-test2/assets/images/3.jpg","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/spiral.html"},{"name":"_css_loader","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/spiral.html","resolved":"/usr/local/lib/node_modules/parcel-bundler/src/builtins/css-loader.js"},{"name":"/Users/meinixue/Documents/GitHub/aladino-test2/package.json","includedInParent":true,"mtime":1615897810000}],"generated":{"html":"<html>\n  <head>\n    <title>Aladino</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>html,\n      body {\n        margin: 0;\n        padding: 0;\n      }\n\n      * {\n        box-sizing: border-box;\n      }\n\n      .wrapper {\n        width: 100%;\n        padding: 0 40px;\n        max-width: 900px;\n        margin: 0 auto;\n      }\n\n      article {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        width: 30vw;\n        height: 60vh;\n      }\n\n      img {\n        position: absolute;\n        max-width: 300px;\n      }</style>\n  </head>\n\n  <body>\n    <div class=\"wrapper\">\n      <article>\n        <img class=\"a\" src=\"/d49179d82fe118fba72ba2734863ecca.jpg\">\n        <img class=\"b\" src=\"/b4f1638f3d798457542ff4bc20eadd3a.jpg\">\n      </article>\n    </div>\n\n    <script type=\"module\">\n      import Aladino from \"./src/index.js\";\n\n      const aladino = new Aladino({\n        density: 20,\n      });\n\n      document.body.appendChild(aladino.canvas);\n\n      const material = aladino.material({\n        vertex: /* glsl */ `\n          attribute vec2 position;\n          attribute vec2 uv;\n\n          uniform mat4 projection;\n          uniform float time;\n\n          varying vec2 vUv;\n\n          mat4 rotationMatrix(vec3 axis, float angle) {\n            axis = normalize(axis);\n            float s = sin(angle);\n            float c = cos(angle);\n            float oc = 1.0 - c;\n\n            return mat4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s, 0.0,\n            oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s, 0.0,\n            oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c, 0.0,\n            0.0, 0.0, 0.0, 1.0);\n          }\n\n          void main() {\n            vUv = uv;\n\n            vec4 pos = vec4(position, 0.0, 1.0);\n            float angle = uv.x + uv.y + time * 0.001;\n            pos = rotationMatrix(vec3(0.2, 1.0, 0.0), angle) * pos;\n\n            gl_Position = projection * pos;\n          }\n        `,\n        fragment: /* glsl */ `\n          precision highp float;\n\n          uniform vec2 size;\n\n          uniform vec2 sizeFront;\n          uniform sampler2D front;\n\n          uniform vec2 sizeBack;\n          uniform sampler2D back;\n\n          varying vec2 vUv;\n\n          vec4 coverTexture(sampler2D tex, vec2 imgSize, vec2 ouv) {\n            vec2 s = size;\n            vec2 i = imgSize;\n\n            float rs = s.x / s.y;\n            float ri = i.x / i.y;\n            vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\n            vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\n            vec2 uv = ouv * s / new + offset;\n          \n            return texture2D(tex, uv);\n          }\n\n          void main() {\n            if (gl_FrontFacing) {\n              gl_FragColor = coverTexture(front, sizeFront, vUv);\n            } else {\n              gl_FragColor = coverTexture(back, sizeBack, vUv);\n            }\n          }\n        `,\n      });\n\n      const el = document.querySelector(\"article\");\n\n      aladino.carpet(el, {\n        material,\n        uniforms: {\n          front: aladino.texture(el.querySelector(\".a\").src),\n          back: aladino.texture(el.querySelector(\".b\").src),\n        },\n      });\n    </script>\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"fca927db3c31d37c6bb90dc394d9f034","cacheData":{"env":{}}}