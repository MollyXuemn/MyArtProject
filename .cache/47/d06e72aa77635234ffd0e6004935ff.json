{"id":"slider.html","dependencies":[{"name":"./assets/images/1.jpg","dynamic":true,"resolved":"/Users/meinixue/Documents/GitHub/aladino-test2/assets/images/1.jpg","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/slider.html"},{"name":"./assets/images/2.jpg","dynamic":true,"resolved":"/Users/meinixue/Documents/GitHub/aladino-test2/assets/images/2.jpg","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/slider.html"},{"name":"./assets/images/4.jpg","dynamic":true,"resolved":"/Users/meinixue/Documents/GitHub/aladino-test2/assets/images/4.jpg","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/slider.html"},{"name":"./assets/images/5.jpg","dynamic":true,"resolved":"/Users/meinixue/Documents/GitHub/aladino-test2/assets/images/5.jpg","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/slider.html"},{"name":"./assets/images/6.jpg","dynamic":true,"resolved":"/Users/meinixue/Documents/GitHub/aladino-test2/assets/images/6.jpg","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/slider.html"},{"name":"./assets/images/8.jpg","dynamic":true,"resolved":"/Users/meinixue/Documents/GitHub/aladino-test2/assets/images/8.jpg","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/slider.html"},{"name":"_css_loader","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/slider.html","resolved":"/usr/local/lib/node_modules/parcel-bundler/src/builtins/css-loader.js"},{"name":"/Users/meinixue/Documents/GitHub/aladino-test2/package.json","includedInParent":true,"mtime":1615897810000}],"generated":{"html":"<html>\n  <head>\n    <title>Aladino</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/flickity@2/dist/flickity.min.css\">\n    <style>html,\n      body {\n        margin: 0;\n        padding: 0;\n      }\n\n      * {\n        box-sizing: border-box;\n      }\n\n      .wrapper {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 100%;\n        height: 100%;\n        margin: 0 auto;\n      }\n\n      .carousel {\n        width: 100%;\n      }\n\n      .cell {\n        width: 60%;\n        margin: 0 20px;\n        height: 70vh;\n      }\n\n      .cell img {\n        width: 100%;\n        height: 100%;\n        object-fit: cover;\n      }\n\n      canvas {\n        z-index: -1;\n      }</style>\n  </head>\n\n  <body>\n    <div class=\"wrapper\">\n      <div class=\"carousel\">\n        <div class=\"cell\">\n          <img src=\"/3f3e71bc65ea5d507ad87ab02f9c0db9.jpg\">\n        </div>\n        <div class=\"cell\">\n          <img src=\"/5ee6e46d858c8cbfcc777470df66db45.jpg\">\n        </div>\n        <div class=\"cell\">\n          <img src=\"/d49179d82fe118fba72ba2734863ecca.jpg\">\n        </div>\n        <div class=\"cell\">\n          <img src=\"/cbc7383c0dbda9d06b318e521ed048d9.jpg\">\n        </div>\n        <div class=\"cell\">\n          <img src=\"/40595ac92a3a7571a2f4b0ced9fb924e.jpg\">\n        </div>\n        <div class=\"cell\">\n          <img src=\"/9806cd4bc969b26ac7968ea0704cb9ad.jpg\">\n        </div>\n      </div>\n    </div>\n\n    <script src=\"https://unpkg.com/flickity@2/dist/flickity.pkgd.min.js\"></script>\n\n    <script type=\"module\">\n      import Aladino from \"./src/index.js\";\n      import lerp from \"./assets/lerp.js\";\n\n      const flkty = new Flickity(document.querySelector(\".carousel\"), {\n        freeScroll: true,\n        dragThreshold: 0,\n        freeScrollFriction: 0.07,\n        prevNextButtons: false,\n        pageDots: false,\n      });\n\n      const isFF = navigator.userAgent.indexOf(\"Firefox\") > -1;\n\n      document.addEventListener(\n        \"wheel\",\n        (e) => {\n          e.preventDefault();\n\n          let y = e.wheelDeltaY || e.deltaY * -1;\n\n          if (isFF) {\n            y *= 5;\n          }\n\n          flkty.applyForce(y * 0.03);\n          flkty.startAnimation();\n          flkty.dragEnd();\n        },\n        { passive: false }\n      );\n\n      const aladino = new Aladino({\n        density: 20,\n        post: {\n          fragment: /* glsl */ `\n          precision highp float;\n          \n          uniform float time;\n          uniform float speed;\n          uniform vec2 viewport;\n          uniform sampler2D image;\n\n          float parabola(float x, float k) {\n            return pow(4.0*x*(1.0-x), k);\n          }\n\n          float random(vec2 co) {\n            return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n          }\n\n          void main() {\n            vec2 uv = gl_FragCoord.xy / viewport;\n            float spe = speed * 300.0;\n            float p = parabola(uv.x, 1.4);\n            float r = texture2D(image, uv + vec2(0.000 * spe, 0.0) * p).r;\n            float g = texture2D(image, uv + vec2(0.01 * spe, 0.0) * p).g;\n            float b = texture2D(image, uv + vec2(0.02 * spe, 0.0) * p).b;\n\n            gl_FragColor = vec4(r, g, b, 1.0);\n\n            float n = random(uv + mod(time, 3.0));\n            gl_FragColor.rgb *= 1.0 - (n * 0.2);\n          }\n        `,\n          uniforms: {\n            speed: 0.0,\n          },\n        },\n      });\n\n      document.body.appendChild(aladino.canvas);\n\n      const material = aladino.material({\n        vertex: /* glsl */ `\n        attribute vec2 position;\n        attribute vec2 uv;\n\n        uniform mat4 projection;\n        //uniform float time;\n        uniform float speed;\n        uniform float speed2;\n\n        varying vec2 vUv;\n\n        float parabola( float x, float k ) {\n          return pow( 4.0*x*(1.0-x), k );\n        }\n\n        void main() {\n          vUv = uv;\n\n          vec4 pos = vec4(position, 0.0, 1.0);\n\n          float spee = speed * 2.0;\n\n          pos.x += parabola(uv.y, 1.0) * spee;\n\n          vec4 pp = projection * vec4(position, 0.0, 1.0);\n          float yy = ((pp / pp.w).x + 1.0) / 2.0;\n          pos.z = parabola(clamp(yy, 0.0, 1.0), 2.4) * speed2 * 160.0;\n          pos.z = clamp(pos.z, -6.0, 6.0);\n\n\n          gl_Position = projection * pos;\n        }\n      `,\n        fragment: /* glsl */ `\n        precision highp float;\n\n        uniform vec2 size;\n\n        uniform vec2 sizeImage;\n        uniform sampler2D image;\n\n        varying vec2 vUv;\n\n        vec4 coverTexture(sampler2D tex, vec2 imgSize, vec2 ouv) {\n          vec2 s = size;\n          vec2 i = imgSize;\n\n          float rs = s.x / s.y;\n          float ri = i.x / i.y;\n          vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\n          vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\n          vec2 uv = ouv * s / new + offset;\n        \n          return texture2D(tex, uv);\n        }\n\n        void main() {\n          gl_FragColor = coverTexture(image, sizeImage, vUv);\n        }\n      `,\n        uniforms: {\n          speed: 0,\n          speed2: 0,\n        },\n      });\n\n      const cells = [...document.querySelectorAll(\".cell\")];\n      const carpets = [];\n      cells.forEach((cell) => {\n        const carpet = aladino.carpet(cell, {\n          material,\n          uniforms: {\n            image: aladino.texture(cell.querySelector(\"img\").src),\n          },\n        });\n\n        carpets.push(carpet);\n      });\n\n      let oldProgress = 0;\n      let speed = 0;\n\n      flkty.on(\"scroll\", (progress) => {\n        // The way flickity works doesn't allow an easy use of the position,\n        // So it can be optimised, as here we're recalculating dom boundingbox each time\n        carpets.forEach((carpet) => {\n          carpet.resize();\n        });\n\n        speed = oldProgress - progress;\n        oldProgress = progress;\n      });\n\n      const update = () => {\n        requestAnimationFrame(update);\n\n        material.uniforms.speed = lerp(material.uniforms.speed, speed, 0.6);\n        material.uniforms.speed2 = lerp(material.uniforms.speed2, speed, 0.1);\n        aladino.post.uniforms.speed = lerp(\n          aladino.post.uniforms.speed,\n          speed,\n          0.1\n        );\n      };\n\n      update();\n    </script>\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"d6c41413bbffd0a16a1c2c6951873918","cacheData":{"env":{}}}