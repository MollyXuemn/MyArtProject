{"id":"hover.html","dependencies":[{"name":"./assets/images/1.jpg","dynamic":true,"resolved":"/Users/meinixue/Documents/GitHub/aladino-test2/assets/images/1.jpg","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/hover.html"},{"name":"./assets/images/2.jpg","dynamic":true,"resolved":"/Users/meinixue/Documents/GitHub/aladino-test2/assets/images/2.jpg","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/hover.html"},{"name":"_css_loader","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/hover.html","resolved":"/usr/local/lib/node_modules/parcel-bundler/src/builtins/css-loader.js"},{"name":"/Users/meinixue/Documents/GitHub/aladino-test2/package.json","includedInParent":true,"mtime":1615897810000}],"generated":{"html":"<html>\n  <head>\n    <title>Aladino</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>html,\n      body {\n        margin: 0;\n        padding: 0;\n      }\n\n      * {\n        box-sizing: border-box;\n      }\n\n      article {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        width: 70vw;\n        height: 50vh;\n      }\n\n      article img {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        object-fit: cover;\n      }\n\n      .b {\n        opacity: 0;\n        transition: opacity 0.3s;\n      }\n\n      article:hover .b {\n        opacity: 1;\n      }</style>\n  </head>\n\n  <body>\n    <article>\n      <img class=\"a\" src=\"/3f3e71bc65ea5d507ad87ab02f9c0db9.jpg\">\n      <img class=\"b\" src=\"/5ee6e46d858c8cbfcc777470df66db45.jpg\">\n    </article>\n\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/gsap/3.0.5/gsap.min.js\" type=\"text/javascript\"></script>\n    <script type=\"module\">\n      import Aladino from \"./src/index.js\";\n\n      const aladino = new Aladino();\n      document.body.appendChild(aladino.canvas);\n\n      const material = aladino.material({\n        vertex: /* glsl */ `\n        attribute vec2 position;\n        attribute vec2 uv;\n\n        uniform mat4 projection;\n        varying vec2 vUv;\n\n        void main() {\n          vUv = uv;\n\n          gl_Position = projection * vec4(position, 0.0, 1.0);\n        }\n      `,\n        fragment: /* glsl */ `\n        precision highp float;\n\n        uniform vec2 size;\n        uniform float progress;\n        uniform vec2 sizeA;\n        uniform sampler2D a;\n        uniform vec2 sizeB;\n        uniform sampler2D b;\n\n        varying vec2 vUv;\n        varying float vPos;\n\n        vec4 coverTexture(sampler2D tex, vec2 imgSize, vec2 ouv) {\n          vec2 s = size;\n          vec2 i = imgSize;\n\n          float rs = s.x / s.y;\n          float ri = i.x / i.y;\n          vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\n          vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\n          vec2 uv = ouv * s / new + offset;\n        \n          return texture2D(tex, uv);\n        }\n\n        vec4 getFromColor(vec2 p) {\n          return coverTexture(a, sizeA, p);\n        }\n\n        vec4 getToColor(vec2 p) {\n          return coverTexture(b, sizeB, p);\n        }\n\n        // https://gl-transitions.com/editor/ColourDistance\n        // License: MIT\n        // Author: rectalogic\n        // ported by gre from https://gist.github.com/rectalogic/b86b90161503a0023231\n\n        // Converted from https://github.com/rectalogic/rendermix-basic-effects/blob/master/assets/com/rendermix/CrossZoom/CrossZoom.frag\n        // Which is based on https://github.com/evanw/glfx.js/blob/master/src/filters/blur/zoomblur.js\n        // With additional easing functions from https://github.com/rectalogic/rendermix-basic-effects/blob/master/assets/com/rendermix/Easing/Easing.glsllib\n\n        const float strength = 0.4;\n        const float PI = 3.141592653589793;\n\n        float Linear_ease(in float begin, in float change, in float duration, in float time) {\n            return change * time / duration + begin;\n        }\n\n        float Exponential_easeInOut(in float begin, in float change, in float duration, in float time) {\n            if (time == 0.0)\n                return begin;\n            else if (time == duration)\n                return begin + change;\n            time = time / (duration / 2.0);\n            if (time < 1.0)\n                return change / 2.0 * pow(2.0, 10.0 * (time - 1.0)) + begin;\n            return change / 2.0 * (-pow(2.0, -10.0 * (time - 1.0)) + 2.0) + begin;\n        }\n\n        float Sinusoidal_easeInOut(in float begin, in float change, in float duration, in float time) {\n            return -change / 2.0 * (cos(PI * time / duration) - 1.0) + begin;\n        }\n\n        float rand (vec2 co) {\n          return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n        }\n\n        vec3 crossFade(in vec2 uv, in float dissolve) {\n            return mix(getFromColor(uv).rgb, getToColor(uv).rgb, dissolve);\n        }\n\n        vec4 transition(vec2 uv) {\n            vec2 texCoord = uv.xy / vec2(1.0).xy;\n\n            // Linear interpolate center across center half of the image\n            vec2 center = vec2(Linear_ease(0.25, 0.5, 1.0, progress), 0.5);\n            float dissolve = Exponential_easeInOut(0.0, 1.0, 1.0, progress);\n\n            // Mirrored sinusoidal loop. 0->strength then strength->0\n            float strength = Sinusoidal_easeInOut(0.0, strength, 0.5, progress);\n\n            vec3 color = vec3(0.0);\n            float total = 0.0;\n            vec2 toCenter = center - texCoord;\n\n            /* randomize the lookup values to hide the fixed number of samples */\n            float offset = rand(uv);\n\n            for (float t = 0.0; t <= 40.0; t++) {\n                float percent = (t + offset) / 40.0;\n                float weight = 4.0 * (percent - percent * percent);\n                color += crossFade(texCoord + toCenter * percent * strength, dissolve) * weight;\n                total += weight;\n            }\n            return vec4(color / total, 1.0);\n        }\n\n        void main() {\n          vec2 s = vUv;\n\n          gl_FragColor = transition(vUv);\n        }\n      `,\n        uniforms: {\n          progress: 0,\n        },\n      });\n\n      const el = document.querySelector(\"article\");\n\n      const carpet = aladino.carpet(el, {\n        material,\n        uniforms: {\n          a: aladino.texture(document.querySelector(\".a\").src),\n          b: aladino.texture(document.querySelector(\".b\").src),\n          progress: 0,\n        },\n      });\n\n      el.addEventListener(\"mouseenter\", () => {\n        gsap.killTweensOf(carpet.uniforms);\n        gsap.to(carpet.uniforms, {\n          progress: 1,\n          duration: 1,\n        });\n      });\n\n      el.addEventListener(\"mouseleave\", () => {\n        gsap.killTweensOf(carpet.uniforms);\n        gsap.to(carpet.uniforms, {\n          progress: 0,\n          duration: 1,\n        });\n      });\n    </script>\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"604a8a2997096b761ed7a1c35a2d7775","cacheData":{"env":{}}}