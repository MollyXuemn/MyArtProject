{"id":"bump.html","dependencies":[{"name":"./assets/images/6.jpg","dynamic":true,"resolved":"/Users/meinixue/Documents/GitHub/aladino-test2/assets/images/6.jpg","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/bump.html"},{"name":"_css_loader","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/bump.html","resolved":"/usr/local/lib/node_modules/parcel-bundler/src/builtins/css-loader.js"},{"name":"/Users/meinixue/Documents/GitHub/aladino-test2/package.json","includedInParent":true,"mtime":1615897810000}],"generated":{"html":"<html>\n  <head>\n    <title>Aladino</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>html,\n      body {\n        margin: 0;\n        padding: 0;\n        font-family: Arial;\n      }\n\n      * {\n        box-sizing: border-box;\n      }\n\n      .wrapper {\n        width: 100%;\n        padding: 0 40px;\n        max-width: 900px;\n        margin: 0 auto;\n      }\n\n      article {\n        width: 100%;\n        height: 60vh;\n      }\n\n      p {\n        margin: 40px 0;\n        line-height: 2;\n      }\n\n      article img {\n        object-fit: cover;\n        width: 100%;\n        height: 100%;\n      }</style>\n  </head>\n\n  <body>\n    <div class=\"wrapper\">\n      <p>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Ad quasi\n        molestiae sed commodi, reprehenderit cum ipsa voluptatibus minus sit\n        fuga eos esse labore, doloribus enim ducimus, beatae eaque aperiam\n        dicta. Aut facere dolorem fuga. Aut reprehenderit ex accusantium earum\n        beatae? Neque nisi sed deserunt nemo, facere velit qui saepe tenetur\n        laudantium incidunt unde et iste blanditiis? Omnis quo consectetur ad?\n        In placeat pariatur sapiente animi est. Similique, ducimus. Esse aliquid\n        aperiam accusamus accusantium aut, tempora ipsam dolor eius ipsa\n        laboriosam deserunt vitae quia illo ea earum ut. Consequatur, id\n        temporibus?\n      </p>\n\n      <article>\n        <img src=\"/40595ac92a3a7571a2f4b0ced9fb924e.jpg\">\n      </article>\n\n      <p>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Ad quasi\n        molestiae sed commodi, reprehenderit cum ipsa voluptatibus minus sit\n        fuga eos esse labore, doloribus enim ducimus, beatae eaque aperiam\n        dicta. Aut facere dolorem fuga. Aut reprehenderit ex accusantium earum\n        beatae? Neque nisi sed deserunt nemo, facere velit qui saepe tenetur\n        laudantium incidunt unde et iste blanditiis? Omnis quo consectetur ad?\n        In placeat pariatur sapiente animi est. Similique, ducimus. Esse aliquid\n        aperiam accusamus accusantium aut, tempora ipsam dolor eius ipsa\n        laboriosam deserunt vitae quia illo ea earum ut. Consequatur, id\n        temporibus?\n      </p>\n\n      <p>\n        Lorem ipsum dolor sit amet consectetur adipisicing elit. Ad quasi\n        molestiae sed commodi, reprehenderit cum ipsa voluptatibus minus sit\n        fuga eos esse labore, doloribus enim ducimus, beatae eaque aperiam\n        dicta. Aut facere dolorem fuga. Aut reprehenderit ex accusantium earum\n        beatae? Neque nisi sed deserunt nemo, facere velit qui saepe tenetur\n        laudantium incidunt unde et iste blanditiis? Omnis quo consectetur ad?\n        In placeat pariatur sapiente animi est. Similique, ducimus. Esse aliquid\n        aperiam accusamus accusantium aut, tempora ipsam dolor eius ipsa\n        laboriosam deserunt vitae quia illo ea earum ut. Consequatur, id\n        temporibus?\n      </p>\n    </div>\n\n    <script src=\"https://unpkg.com/math-toolbox/dist/math-toolbox.umd.min.js\"></script>\n\n    <script type=\"module\">\n      import Aladino from \"./src/index.js\";\n      import Pointer from \"./assets/pointer.js\";\n      import lerp from \"./assets/lerp.js\";\n\n      const pointer = new Pointer();\n\n      const aladino = new Aladino({\n        density: 100,\n      });\n\n      document.body.appendChild(aladino.canvas);\n\n      const material = aladino.material({\n        vertex: /* glsl */ `\n        attribute vec2 position;\n        attribute vec2 uv;\n\n        uniform mat4 projection;\n        uniform float time;\n        uniform vec2 viewport;\n        uniform vec2 pointer;\n\n        varying vec2 vUv;\n        varying float vDist;\n\n        void main() {\n          vUv = uv;\n\n          float aspect = viewport.x / viewport.y;\n          vec4 pos = vec4(position, 0.0, 1.0);\n\n          vec4 pp = projection * vec4(position, 0.0, 1.0);\n          pp /= pp.w;\n\n          pp.y /= aspect;\n\n          float dist = distance(pointer, pp.xy);\n          \n          float v = smoothstep(0.3, 0.0, dist);\n          vDist = v;\n\n          pos.xyz *= 1.0 + (v * 0.14);\n          pos.z += sin(uv.x + uv.y * 2.0 + time * 0.002) * 0.2;\n\n          gl_Position = projection * pos;\n        }\n      `,\n        fragment: /* glsl */ `\n        precision highp float;\n\n        uniform vec2 size;\n\n        uniform vec2 sizeImage;\n        uniform sampler2D image;\n\n        varying vec2 vUv;\n        varying float vDist;\n\n        vec4 coverTexture(sampler2D tex, vec2 imgSize, vec2 ouv) {\n          vec2 s = size;\n          vec2 i = imgSize;\n\n          float rs = s.x / s.y;\n          float ri = i.x / i.y;\n          vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\n          vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\n          vec2 uv = ouv * s / new + offset;\n        \n          return texture2D(tex, uv);\n        }\n\n        void main() {\n          vec3 j = vec3(1.0, 0.580392, 0.619607);\n          vec3 k = vec3(0.9411764, 0.517647, 0.552941);\n          vec3 l = vec3(1.0, 0.729411, 0.749019);\n          vec3 m = vec3(0.949019, 0.949019, 0.949019);\n\n          vec3 color = vec3(0.0, 0.0, 0.0);\n\n          float z = vDist;\n          color = mix(j, k, smoothstep(0.0, 0.23, z));\n          color = mix(color, j, smoothstep(0.13, 0.6, z));\n          color = mix(color, l, smoothstep(0.5, 1.0, z));\n\n          vec4 img = coverTexture(image, sizeImage, vUv);\n          const vec3 W = vec3(0.2125, 0.7154, 0.0721);\n          float luma = dot(img.rgb, W);\n\n          gl_FragColor = mix(\n            img,\n            vec4(color, 1.0)\n          , 0.4);\n        }\n      `,\n      });\n\n      const el = document.querySelector(\"article\");\n\n      const carpet = aladino.carpet(el, {\n        material,\n        uniforms: {\n          image: aladino.texture(el.querySelector(\"img\").src),\n          pointer: [0, 0],\n        },\n      });\n\n      const update = () => {\n        requestAnimationFrame(update);\n        const smooth = 0.2;\n        carpet.uniforms.pointer[0] = lerp(\n          carpet.uniforms.pointer[0],\n          pointer.ndc[0],\n          smooth\n        );\n        carpet.uniforms.pointer[1] = lerp(\n          carpet.uniforms.pointer[1],\n          pointer.ndc[1],\n          smooth\n        );\n      };\n\n      update();\n    </script>\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"5f2f3756114b3fd82e506f17da08b397","cacheData":{"env":{}}}