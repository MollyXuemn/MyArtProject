{"id":"button.html","dependencies":[{"name":"_css_loader","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/button.html","resolved":"/usr/local/lib/node_modules/parcel-bundler/src/builtins/css-loader.js"},{"name":"/Users/meinixue/Documents/GitHub/aladino-test2/package.json","includedInParent":true,"mtime":1615897810000}],"generated":{"html":"<html>\n  <head>\n    <title>Aladino</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>html,\n      body {\n        margin: 0;\n        padding: 0;\n        font-family: \"Arial\", serif;\n      }\n\n      * {\n        box-sizing: border-box;\n      }\n\n      .wrapper {\n        width: 100%;\n        padding: 0 40px;\n        max-width: 900px;\n        margin: 0 auto;\n      }\n\n      article {\n        width: 100%;\n        height: 0;\n        padding-bottom: 60%;\n        background: red;\n        margin: 50px 0;\n      }\n\n      button {\n        font-size: 20px;\n        padding: 20px;\n        cursor: pointer;\n        border: 0;\n        background-color: black;\n        color: white;\n        margin-bottom: 50px;\n      }\n\n      button.aladino {\n        opacity: 1 !important;\n        background: transparent;\n      }\n\n      h1 {\n        font-size: 20px;\n      }\n\n      canvas {\n        z-index: -1;\n      }</style>\n  </head>\n  <body>\n    <div class=\"wrapper\">\n      <div style=\"height: 50px\"></div>\n      <h1>Hi there, this is a `button`:</h1>\n\n      <button>\n        <span>Click here</span>\n      </button>\n\n      <h1>This is the same button, with aladino:</h1>\n\n      <button class=\"button-1\">\n        <span>Click here</span>\n      </button>\n\n      <h1>wireframe debug:</h1>\n      <button class=\"button-2\">\n        <span>Click here</span>\n      </button>\n\n      <h1>displacement + uv:</h1>\n      <button class=\"button-3\">\n        <span>Click here</span>\n      </button>\n\n      <h1>texture:</h1>\n      <button class=\"button-4\" data-image=\"https://source.unsplash.com/random\">\n        <span>Click here</span>\n      </button>\n\n      <h1>hover:</h1>\n      <button class=\"button-5\">\n        <span>Click here</span>\n      </button>\n\n      <h1>hover 2:</h1>\n      <button class=\"button-6\">\n        <span>Click here</span>\n      </button>\n    </div>\n\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/gsap/3.0.5/gsap.min.js\" type=\"text/javascript\"></script>\n\n    <script type=\"module\">\n      import Aladino from \"./src/index.js\";\n\n      const aladino = new Aladino({\n        density: 10,\n      });\n\n      document.body.appendChild(aladino.canvas);\n\n      aladino.carpet(document.querySelector(\".button-1\"), {\n        material: aladino.material(),\n      });\n\n      aladino.carpet(document.querySelector(\".button-2\"), {\n        material: aladino.material(),\n        wireframe: true,\n        scale: [2, 1],\n      });\n\n      aladino.carpet(document.querySelector(\".button-3\"), {\n        material: aladino.material({\n          vertex: /* glsl */ `\n          attribute vec2 position;\n          attribute vec2 uv;\n\n          uniform mat4 projection;\n          uniform float time;\n\n          varying vec2 vUv;\n\n          void main() {\n            vUv = uv;\n            float p = sin(time * 0.003 + uv.y * 4. + uv.x * .3) * .2;\n\n            float scale = ((sin(time * 0.003) + 1.0) / 2.0) * .4 + 1.0;\n            gl_Position = projection * vec4(position * scale, p, 1.0);\n          }\n        `,\n          fragment: /* glsl */ `\n          precision highp float;\n\n          varying vec2 vUv;\n\n          void main() {\n            gl_FragColor = vec4(vUv, 0.0, 1.0);\n          }\n        `,\n        }),\n        position: [100, 0],\n        scale: [1.1, 1],\n      });\n\n      aladino.carpet(document.querySelector(\".button-4\"), {\n        material: aladino.material({\n          vertex: /* glsl */ `\n            attribute vec2 position;\n            attribute vec2 uv;\n\n            uniform mat4 projection;\n            uniform float time;\n\n            varying vec2 vUv;\n\n            void main() {\n              vUv = uv;\n              float p = sin(time * 0.003 + uv.y * 3. + uv.x * 2.0) * .2;\n              gl_Position = projection * vec4(position, p, 1.0);\n            }\n          `,\n          fragment: /* glsl */ `\n            precision highp float;\n\n            uniform sampler2D image;\n            varying vec2 vUv;\n\n            void main() {\n              gl_FragColor = texture2D(image, vUv);\n            }\n          `,\n          uniforms: {\n            image: aladino.texture(\n              document.querySelector(\".button-4\").dataset.image\n            ),\n          },\n        }),\n      });\n\n      const button5 = document.querySelector(\".button-5\");\n      const carpet5 = aladino.carpet(button5, {\n        material: aladino.material({\n          vertex: /* glsl */ `\n            attribute vec2 position;\n            attribute vec2 uv;\n\n            uniform mat4 projection;\n            uniform float time;\n            uniform float hover;\n\n            varying vec2 vUv;\n\n            float parabola(float x, float k) {\n              return pow(4.0*x*(1.0-x), k);\n            }\n\n            void main() {\n              vUv = uv;\n              vec4 pos = vec4(position, 0.0, 1.0);\n\n              pos.xyz *= 1.0 + ((parabola(uv.x, 1.4) * .3) * hover);\n\n              gl_Position = projection * pos;\n            }`,\n          fragment: /* glsl */ `\n            precision highp float;\n\n            void main() {\n              gl_FragColor = vec4(0, 0.0, 0.0, 1.0);\n            }\n          `,\n        }),\n        uniforms: {\n          hover: 0,\n        },\n      });\n\n      button5.addEventListener(\"mouseenter\", () => {\n        gsap.killTweensOf(carpet5.uniforms);\n        gsap.to(carpet5.uniforms, {\n          hover: 1,\n          duration: 1,\n          ease: \"elastic.out(1, 0.3)\",\n        });\n      });\n\n      button5.addEventListener(\"mouseleave\", () => {\n        gsap.killTweensOf(carpet5.uniforms);\n        gsap.to(carpet5.uniforms, {\n          hover: 0,\n          duration: 2,\n          ease: \"elastic.out(1, 0.18)\",\n        });\n      });\n\n      // Button 6\n      const button6 = document.querySelector(\".button-6\");\n      const carpet6 = aladino.carpet(button6, {\n        material: aladino.material({\n          vertex: /* glsl */ `\n            attribute vec2 position;\n            attribute vec2 uv;\n\n            uniform mat4 projection;\n            varying vec2 vUv;\n\n            void main() {\n              vUv = uv;\n\n              vec4 pos = vec4(position, 0.0, 1.0);\n              gl_Position = projection * pos;\n            }\n          `,\n          fragment: /* glsl */ `\n          precision highp float;\n\n          uniform float time;\n          uniform float hover;\n          varying vec2 vUv;\n\n          vec3 mod289(vec3 x) {\n              return x - floor(x * (1.0 / 289.0)) * 289.0;\n          }\n          vec4 mod289(vec4 x) {\n              return x - floor(x * (1.0 / 289.0)) * 289.0;\n          }\n          vec4 permute(vec4 x) {\n              return mod289(((x*34.0)+1.0)*x);\n          }\n          vec4 taylorInvSqrt(vec4 r) {\n              return 1.79284291400159 - 0.85373472095314 * r;\n          }\n          float snoise(vec3 v) {\n              const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n              const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n              \n              // First corner\n              \n              vec3 i = floor(v + dot(v, C.yyy) );\n              vec3 x0 = v - i + dot(i, C.xxx) ;\n              \n              // Other corners\n              \n              vec3 g = step(x0.yzx, x0.xyz);\n              vec3 l = 1.0 - g;\n              vec3 i1 = min( g.xyz, l.zxy );\n              vec3 i2 = max( g.xyz, l.zxy );\n              \n              //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n              \n              //   x1 = x0 - i1  + 1.0 * C.xxx;\n              //   x2 = x0 - i2  + 2.0 * C.xxx;\n              //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n              vec3 x1 = x0 - i1 + C.xxx;\n              vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n              \n              vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n              \n              \n              // Permutations\n              i = mod289(i);\n              vec4 p = permute( permute( permute(\n              i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n              + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n              + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n              \n              // Gradients: 7x7 points over a square, mapped onto an octahedron.\n              \n              // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n              float n_ = 0.142857142857; // 1.0/7.0\n              \n              vec3  ns = n_ * D.wyz - D.xzx;\n              vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p, 7*7)\n              \n              \n              vec4 x_ = floor(j * ns.z);\n              vec4 y_ = floor(j - 7.0 * x_ );    // mod(j, N)\n              \n              \n              vec4 x = x_ *ns.x + ns.yyyy;\n              vec4 y = y_ *ns.x + ns.yyyy;\n              vec4 h = 1.0 - abs(x) - abs(y);\n              vec4 b0 = vec4( x.xy, y.xy );\n              vec4 b1 = vec4( x.zw, y.zw );\n              \n              //vec4 s0 = vec4(lessThan(b0, 0.0))*2.0 - 1.0;\n              \n              //vec4 s1 = vec4(lessThan(b1, 0.0))*2.0 - 1.0;\n              vec4 s0 = floor(b0)*2.0 + 1.0;\n              vec4 s1 = floor(b1)*2.0 + 1.0;\n              vec4 sh = -step(h, vec4(0.0));\n              vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n              vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n              vec3 p0 = vec3(a0.xy, h.x);\n              vec3 p1 = vec3(a0.zw, h.y);\n              vec3 p2 = vec3(a1.xy, h.z);\n              vec3 p3 = vec3(a1.zw, h.w);\n              \n              //Normalise gradients\n              \n              vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n              p0 *= norm.x;\n              p1 *= norm.y;\n              p2 *= norm.z;\n              p3 *= norm.w;\n              \n              // Mix final noise value\n              \n              vec4 m = max(0.6 - vec4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);\n              m = m * m;\n              return 42.0 * dot( m*m, vec4( dot(p0, x0), dot(p1, x1), dot(p2, x2), dot(p3, x3) ) );\n          }\n\n          void main() {\n            vec4 color = vec4(0.0, 0.0, 0.0, 1.0);\n\n            float total = 0.0;\n            vec3 pos = vec3(vUv.xy * 4.0, time * 0.0004);\n            float adjust;\n            for(float i = 0.0; i < 3.0; i++) {\n                // octaves\n                float frequency = pow(4.2, i);\n                float amplitude = pow(0.4, i);\n                adjust += amplitude;\n                total += snoise(pos * frequency) * amplitude;\n            }\n            \n            // float n = noise(vec3(vUv.x * 8.0 + time * 0.004, vUv.y * 4.0, time * 0.001));\n            color = mix(color, vec4(1.0), total + hover);\n\n            gl_FragColor = color;\n          }\n        `,\n        }),\n        uniforms: {\n          hover: 0,\n        },\n      });\n\n      button6.addEventListener(\"mouseenter\", () => {\n        gsap.killTweensOf(carpet6.uniforms);\n        gsap.to(carpet6.uniforms, {\n          hover: 1,\n          duration: 1,\n          ease: \"elastic.out(1, 0.3)\",\n        });\n      });\n\n      button6.addEventListener(\"mouseleave\", () => {\n        gsap.killTweensOf(carpet6.uniforms);\n        gsap.to(carpet6.uniforms, {\n          hover: 0,\n          duration: 2,\n          ease: \"elastic.out(1, 0.18)\",\n        });\n      });\n    </script>\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"f523a83ebee9912561d782a64e438be4","cacheData":{"env":{}}}