{"id":"accordion.html","dependencies":[{"name":"./assets/images/1.jpg","dynamic":true,"resolved":"/Users/meinixue/Documents/GitHub/aladino-test2/assets/images/1.jpg","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/accordion.html"},{"name":"_css_loader","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/accordion.html","resolved":"/usr/local/lib/node_modules/parcel-bundler/src/builtins/css-loader.js"},{"name":"/Users/meinixue/Documents/GitHub/aladino-test2/package.json","includedInParent":true,"mtime":1615897810000}],"generated":{"html":"<html>\n  <head>\n    <title>Aladino</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>html,\n      body {\n        margin: 0;\n        padding: 0;\n      }\n\n      * {\n        box-sizing: border-box;\n      }\n\n      article {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        width: 70vw;\n        height: 50vh;\n      }\n\n      article img {\n        object-fit: cover;\n        width: 100%;\n        height: 100%;\n      }</style>\n  </head>\n  <body>\n    <article>\n      <img src=\"/3f3e71bc65ea5d507ad87ab02f9c0db9.jpg\">\n    </article>\n\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/gsap/3.0.5/gsap.min.js\" type=\"text/javascript\"></script>\n    <script type=\"module\">\n      import Aladino from \"./src/index.js\";\n\n      const aladino = new Aladino({\n        density: 200,\n      });\n\n      document.body.appendChild(aladino.canvas);\n\n      const material = aladino.material({\n        vertex: /* glsl */ `\n          attribute vec2 position;\n          attribute vec2 uv;\n\n          uniform mat4 projection;\n          uniform float time;\n          uniform float hover;\n\n          varying vec2 vUv;\n          varying float vPos;\n\n          float parabola( float x, float k ) {\n            return pow( 4.0*x*(1.0-x), k );\n          }\n\n          void main() {\n            vUv = uv;\n\n            vec4 pos = vec4(position, 0.0, 1.0);\n\n            pos.z = mix(sin(uv.x * 100.0) * 0.3, pos.z, hover);\n            pos.x *= mix((1.0 - parabola(uv.y, 0.5) * 0.2) * 0.5, 1.0, hover);\n\n            vPos = pos.z;\n\n            gl_Position = projection * pos;\n          }\n        `,\n        fragment: /* glsl */ `\n          precision highp float;\n\n          uniform vec2 size;\n          uniform vec2 sizeImage;\n          uniform sampler2D image;\n\n          varying vec2 vUv;\n          varying float vPos;\n\n          vec4 coverTexture(sampler2D tex, vec2 imgSize, vec2 ouv) {\n            vec2 s = size;\n            vec2 i = imgSize;\n\n            float rs = s.x / s.y;\n            float ri = i.x / i.y;\n            vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\n            vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\n            vec2 uv = ouv * s / new + offset;\n          \n            return texture2D(tex, uv);\n          }\n\n          void main() {\n            vec2 s = vUv;\n\n            gl_FragColor = coverTexture(image, sizeImage, s);\n\n            gl_FragColor.rgb *= 1.0 - smoothstep(0.0, -1.0, vPos);\n          }\n        `,\n      });\n\n      const el = document.querySelector(\"article\");\n\n      const carpet = aladino.carpet(el, {\n        material,\n        uniforms: {\n          image: aladino.texture(el.querySelector(\"img\").src),\n          hover: 0,\n        },\n      });\n\n      el.addEventListener(\"mouseenter\", () => {\n        gsap.killTweensOf(carpet.uniforms);\n        gsap.to(carpet.uniforms, {\n          hover: 1,\n          duration: 1,\n          ease: \"elastic.out(1.0, 0.5)\",\n        });\n      });\n\n      el.addEventListener(\"mouseleave\", () => {\n        gsap.killTweensOf(carpet.uniforms);\n        gsap.to(carpet.uniforms, {\n          hover: 0,\n          duration: 2,\n          ease: \"elastic.out(1.0, 0.5)\",\n        });\n      });\n    </script>\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"d4ea4cc0dc4c79acd5dfb39685a855b5","cacheData":{"env":{}}}