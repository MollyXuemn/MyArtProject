{"id":"scroll.html","dependencies":[{"name":"./assets/images/1.jpg","dynamic":true,"resolved":"/Users/meinixue/Documents/GitHub/aladino-test2/assets/images/1.jpg","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/scroll.html"},{"name":"./assets/images/2.jpg","dynamic":true,"resolved":"/Users/meinixue/Documents/GitHub/aladino-test2/assets/images/2.jpg","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/scroll.html"},{"name":"./assets/images/3.jpg","dynamic":true,"resolved":"/Users/meinixue/Documents/GitHub/aladino-test2/assets/images/3.jpg","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/scroll.html"},{"name":"./assets/images/4.jpg","dynamic":true,"resolved":"/Users/meinixue/Documents/GitHub/aladino-test2/assets/images/4.jpg","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/scroll.html"},{"name":"./assets/images/5.jpg","dynamic":true,"resolved":"/Users/meinixue/Documents/GitHub/aladino-test2/assets/images/5.jpg","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/scroll.html"},{"name":"./assets/images/6.jpg","dynamic":true,"resolved":"/Users/meinixue/Documents/GitHub/aladino-test2/assets/images/6.jpg","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/scroll.html"},{"name":"./assets/images/8.jpg","dynamic":true,"resolved":"/Users/meinixue/Documents/GitHub/aladino-test2/assets/images/8.jpg","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/scroll.html"},{"name":"_css_loader","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/scroll.html","resolved":"/usr/local/lib/node_modules/parcel-bundler/src/builtins/css-loader.js"},{"name":"/Users/meinixue/Documents/GitHub/aladino-test2/package.json","includedInParent":true,"mtime":1615897810000}],"generated":{"html":"<html>\n  <head>\n    <title>Aladino</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>html,\n      body {\n        margin: 0;\n        padding: 0;\n      }\n\n      * {\n        box-sizing: border-box;\n      }\n\n      .wrapper {\n        width: 80%;\n        padding: 0 40px;\n        max-width: 900px;\n        margin: 0 auto;\n        padding: 40px 0;\n      }\n\n      img {\n        max-width: 100%;\n        margin: 40px 0;\n      }\n\n      canvas {\n        z-index: -1;\n      }</style>\n  </head>\n\n  <body>\n    <div class=\"wrapper\">\n      <img src=\"/3f3e71bc65ea5d507ad87ab02f9c0db9.jpg\">\n      <img src=\"/5ee6e46d858c8cbfcc777470df66db45.jpg\">\n      <img src=\"/b4f1638f3d798457542ff4bc20eadd3a.jpg\">\n      <img src=\"/d49179d82fe118fba72ba2734863ecca.jpg\">\n      <img src=\"/cbc7383c0dbda9d06b318e521ed048d9.jpg\">\n      <img src=\"/40595ac92a3a7571a2f4b0ced9fb924e.jpg\">\n      <img src=\"/9806cd4bc969b26ac7968ea0704cb9ad.jpg\">\n    </div>\n\n    <canvas></canvas>\n\n    <script type=\"module\">\n      import Aladino from \"./src/index.js\";\n      import lerp from \"./assets/lerp.js\";\n\n      const aladino = new Aladino({\n        canvas: document.querySelector(\"canvas\"),\n        density: 20,\n      });\n\n      const images = [...document.querySelectorAll(\"img\")];\n      const material = aladino.material({\n        vertex: /* glsl */ `\n          attribute vec2 position;\n          attribute vec2 uv;\n\n          uniform mat4 projection;\n          uniform float time;\n\n          uniform float speed;\n\n          varying vec2 vUv;\n          varying float intensity;\n\n          float parabola( float x, float k ) {\n            return pow( 4.0*x*(1.0-x), k );\n          }\n\n          void main() {\n            vUv = uv;\n\n            vec4 pos = vec4(position, 0.0, 1.0);\n\n            vec4 pp = projection * vec4(position, 0.0, 1.0);\n            float yy = ((pp / pp.w).y + 1.0) / 2.0;\n            pos.z += parabola(clamp(yy, 0.0, 1.0), 0.8) * speed;\n\n            intensity = pos.z;\n\n            gl_Position = projection * pos;\n          }\n        `,\n        fragment: /* glsl */ `\n          precision highp float;\n\n          uniform vec2 size;\n          uniform vec2 sizeImage;\n          uniform sampler2D image;\n          varying float intensity;\n\n          varying vec2 vUv;\n\n          vec4 coverTexture(vec2 ruv) {\n            vec2 s = size;\n            vec2 i = sizeImage;\n\n            float rs = s.x / s.y;\n            float ri = i.x / i.y;\n            vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\n            vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\n            vec2 uv = ruv * s / new + offset;\n          \n            return texture2D(image, uv);\n          }\n\n          void main() {\n            vec2 coords = vUv;\n\n            coords -= 0.5;\n            coords *= 0.8 + (intensity * 0.05);\n            coords += 0.5;\n\n            gl_FragColor = coverTexture(coords);\n          }\n        `,\n        uniforms: {\n          speed: 0,\n        },\n      });\n\n      images.forEach((el, index) => {\n        aladino.carpet(el, {\n          material,\n          uniforms: {\n            image: aladino.texture(el.src),\n          },\n        });\n      });\n\n      let oldPos = aladino.y;\n      let speed = 0;\n\n      const update = () => {\n        requestAnimationFrame(update);\n\n        speed = (aladino.y - oldPos) * 0.1;\n        material.uniforms.speed = lerp(\n          material.uniforms.speed,\n          speed * 0.2,\n          0.06\n        );\n        oldPos = aladino.y;\n      };\n\n      update();\n    </script>\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"c22414140638b68a3feba52d84a59bc3","cacheData":{"env":{}}}