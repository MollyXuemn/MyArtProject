{"id":"follow.html","dependencies":[{"name":"./assets/images/3.jpg","dynamic":true,"resolved":"/Users/meinixue/Documents/GitHub/aladino-test2/assets/images/3.jpg","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/follow.html"},{"name":"_css_loader","parent":"/Users/meinixue/Documents/GitHub/aladino-test2/follow.html","resolved":"/usr/local/lib/node_modules/parcel-bundler/src/builtins/css-loader.js"},{"name":"/Users/meinixue/Documents/GitHub/aladino-test2/package.json","includedInParent":true,"mtime":1616730093633}],"generated":{"html":"<html>\n  <head>\n    <title>Aladino</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <style>html,\n      body {\n        margin: 0;\n        padding: 0;\n      }\n\n      * {\n        box-sizing: border-box;\n      }\n\n      article {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 20vw;\n        height: 40vh;\n      }\n\n      article img {\n        width: 100%;\n        height: 100%;\n        object-fit: cover;\n      }</style>\n  </head>\n\n  <body>\n    <article>\n      <img src=\"/b4f1638f3d798457542ff4bc20eadd3a.jpg\">\n    </article>\n\n    <script type=\"module\">\n      import Aladino from \"./src/index.js\";\n      import Pointer from \"./assets/pointer.js\";\n      import lerp from \"./assets/lerp.js\";\n\n      const pointer = new Pointer();\n      const aladino = new Aladino({\n        density: 20,\n      });\n\n      document.body.appendChild(aladino.canvas);\n\n      const material = aladino.material({\n        vertex: /* glsl */ `\n          attribute vec2 position;\n          attribute vec2 uv;\n\n          uniform mat4 projection;\n          uniform float time;\n          uniform vec2 speed;\n\n          varying vec2 vUv;\n\n          float parabola( float x, float k ) {\n            return pow( 4.0*x*(1.0-x), k );\n          }\n\n          void main() {\n            vUv = uv;\n\n            vec4 pos = vec4(position, 0.0, 1.0);\n\n            vec2 spee = speed * 0.03;\n\n            pos.x += parabola(uv.y, 1.0) * spee.x;\n            pos.y -= parabola(uv.x, 1.0) * spee.y;\n\n            gl_Position = projection * pos;\n          }\n        `,\n        fragment: /* glsl */ `\n          precision highp float;\n\n          uniform vec2 size;\n          uniform vec2 sizeImage;\n          uniform sampler2D image;\n          uniform vec2 speed;\n\n          varying vec2 vUv;\n\n          vec4 coverTexture(sampler2D tex, vec2 imgSize, vec2 ouv) {\n            vec2 s = size;\n            vec2 i = imgSize;\n\n            float rs = s.x / s.y;\n            float ri = i.x / i.y;\n            vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\n            vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\n            vec2 uv = ouv * s / new + offset;\n          \n            return texture2D(tex, uv);\n          }\n\n          void main() {\n            vec2 s = vUv;\n\n            s -= .5;\n            s *= 0.7;\n            s -= (speed * 0.03);\n            s += .5;\n\n            gl_FragColor = coverTexture(image, sizeImage, s);\n          }\n        `,\n      });\n\n      const el = document.querySelector(\"article\");\n\n      const carpet = aladino.carpet(el, {\n        material,\n        uniforms: {\n          image: aladino.texture(el.querySelector(\"img\").src),\n          speed: [0, 0],\n        },\n      });\n\n      let oldSpeed = [0, 0];\n\n      const update = () => {\n        requestAnimationFrame(update);\n\n        carpet.position[0] = lerp(\n          carpet.position[0],\n          pointer.coords[0] - carpet.bounds.width / 2,\n          0.2\n        );\n        carpet.position[1] = lerp(\n          carpet.position[1],\n          pointer.coords[1] - carpet.bounds.height / 2,\n          0.2\n        );\n\n        carpet.uniforms.speed[0] = lerp(\n          carpet.uniforms.speed[0],\n          (carpet.position[0] - oldSpeed[0]) * 0.1,\n          0.7\n        );\n        carpet.uniforms.speed[1] = lerp(\n          carpet.uniforms.speed[1],\n          (carpet.position[1] - oldSpeed[1]) * 0.1,\n          0.7\n        );\n\n        oldSpeed[0] = carpet.position[0];\n        oldSpeed[1] = carpet.position[1];\n      };\n\n      update();\n    </script>\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"df97fb068fcad96c118ebca04e431f12","cacheData":{"env":{}}}